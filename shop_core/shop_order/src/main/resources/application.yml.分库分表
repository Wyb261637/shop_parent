server:
  port: 8004

mybatis-plus:
  mapper-locations: classpath:com/atguigu/mapper/xml/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
feign:
  sentinel:
    enabled: true
  client:
    config:
      default:
        readTimeout: 3000
        connectTimeout: 1000
spring:
  application:
    name: shop-order
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.2.129:8848
  rabbitmq:
    host: 192.168.2.129
    port: 5672
    username: root
    password: 123456
  redis:
    host: 192.168.2.129
    port: 6379
    database: 0
    timeout: 1800000
  #  datasource:
  #    type: com.zaxxer.hikari.HikariDataSource
  #    driver-class-name: com.mysql.jdbc.Driver
  #    url: jdbc:mysql://192.168.2.129:3306/shop_order?characterEncoding=utf-8&useSSL=false
  #    username: root
  #    password: root
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  shardingsphere:
    datasource:
      #真实物理数据库名称
      names: ds-1,read-ds1-1,read-ds1-2,ds-2,read-ds2-1,read-ds2-2,ds-3,read-ds3-1,read-ds3-2
      #1号组
      ds-1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.2.129:3305/db_order_01?characterEncoding=utf-8&useSSL=false
        username: root
        password: root
      read-ds1-1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.2.129:3305/db_order_02?characterEncoding=utf-8&useSSL=false
        username: root
        password: root
      read-ds1-2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.2.129:3305/db_order_03?characterEncoding=utf-8&useSSL=false
        username: root
        password: root

    rules:
      sharding:
        #配置一个默认分库策略
        default-database-strategy:
          standard:
            #用哪个字段分库
            sharding-column: user_id
            #分库算法名称
            sharding-algorithm-name: sharding-db-by-user-id
        #配置所有算法
        sharding-algorithms:
          #配置分库算法
          sharding-db-by-user-id:
            type: INLINE
            props: #ds-1,read-ds1-1,read-ds1-2
              algorithm-expression: ds-$->{user_id%3+1}
          #配置订单基本信息分表算法
          sharding-table-order-by-user-id:
            type: INLINE
            props: #t_order_1,t_order_2,t_order_3,t_order_4
              algorithm-expression: t_order_$->{user_id%4+1}
          #配置订单详情信息分表算法
          sharding-table-order-detail-by-user-id:
            type: INLINE
            props: #t_order_detail_1,t_order_detail_2,t_order_detail_3,t_order_detail_4
              algorithm-expression: t_order_detail_$->{user_id%4+1}
        #配置表分表所有算法
        tables:
          t_order:
            #真实数据库节点
            actual-data-nodes: ds-$->{1..3}.t_order_$->{1..4}
            table-strategy:
              standard:
                #用哪个字段分库
                sharding-column: user_id
                #分库算法名称
                sharding-algorithm-name: sharding-table-order-by-user-id
            #真实数据库节点
          t_order_detail:
            actual-data-nodes: ds-$->{1..3}.t_order_detail_$->{1..4}
            table-strategy:
              standard:
                #用哪个字段分库
                sharding-column: user_id
                #分库算法名称
                sharding-algorithm-name: sharding-table-order-detail-by-user-id
        binding-tables:
          - t_order,t_order_detail

    #打印SQL语句
    props:
      sql-show: true

cancel:
  order:
    delay: 30000